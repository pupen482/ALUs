$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 4 6 arg [3:0] $end
  $var wire 3 7 command [2:0] $end
  $var wire 1 8 select_args $end
  $var wire 1 9 load_args $end
  $var wire 1 : lo_hi_arg $end
  $var wire 1 ; carry_in $end
  $var wire 1 < clock $end
  $var wire 1 = reset $end
  $var wire 8 > result [7:0] $end
  $var wire 8 ? flags [7:0] $end
  $var wire 1 @ carry_out $end
  $scope module alu_virtual_board_pkg $end
   $var wire 32 I SELECT_W [31:0] $end
   $var wire 32 G ORIG_OPERAND_W [31:0] $end
   $var wire 32 G ORIG_RESULT_W [31:0] $end
   $var wire 32 I OPERAND_DESIGN [31:0] $end
   $var wire 32 J RESULT_DESIGN [31:0] $end
  $upscope $end
  $scope module alu_virtual_board $end
   $var wire 4 6 arg [3:0] $end
   $var wire 3 7 command [2:0] $end
   $var wire 1 8 select_args $end
   $var wire 1 9 load_args $end
   $var wire 1 : lo_hi_arg $end
   $var wire 1 ; carry_in $end
   $var wire 1 < clock $end
   $var wire 1 = reset $end
   $var wire 8 > result [7:0] $end
   $var wire 8 ? flags [7:0] $end
   $var wire 1 @ carry_out $end
   $var wire 8 0 arg_a [7:0] $end
   $var wire 8 1 arg_b [7:0] $end
   $var wire 4 A sel_bits [3:0] $end
   $var wire 1 # local_carry $end
   $var wire 2 $ P [1:0] $end
   $var wire 2 % G [1:0] $end
   $scope module gen_block[0] $end
    $scope module dut_virtual $end
     $var wire 4 2 A [3:0] $end
     $var wire 4 3 B [3:0] $end
     $var wire 3 7 S [2:0] $end
     $var wire 1 ; Cn $end
     $var wire 4 & F [3:0] $end
     $var wire 1 ' P $end
     $var wire 1 ( G $end
     $var wire 4 ) P_int [3:0] $end
     $var wire 4 * G_int [3:0] $end
    $upscope $end
    $scope module reg_a $end
     $var wire 32 G WIDTH [31:0] $end
     $var wire 1 < clock $end
     $var wire 1 = reset $end
     $var wire 1 B load $end
     $var wire 4 6 data_in [3:0] $end
     $var wire 4 2 data_out [3:0] $end
    $upscope $end
    $scope module reg_b $end
     $var wire 32 G WIDTH [31:0] $end
     $var wire 1 < clock $end
     $var wire 1 = reset $end
     $var wire 1 C load $end
     $var wire 4 6 data_in [3:0] $end
     $var wire 4 3 data_out [3:0] $end
    $upscope $end
   $upscope $end
   $scope module gen_block[1] $end
    $scope module dut_virtual $end
     $var wire 4 4 A [3:0] $end
     $var wire 4 5 B [3:0] $end
     $var wire 3 7 S [2:0] $end
     $var wire 1 # Cn $end
     $var wire 4 + F [3:0] $end
     $var wire 1 , P $end
     $var wire 1 - G $end
     $var wire 4 . P_int [3:0] $end
     $var wire 4 / G_int [3:0] $end
    $upscope $end
    $scope module reg_a $end
     $var wire 32 G WIDTH [31:0] $end
     $var wire 1 < clock $end
     $var wire 1 = reset $end
     $var wire 1 D load $end
     $var wire 4 6 data_in [3:0] $end
     $var wire 4 4 data_out [3:0] $end
    $upscope $end
    $scope module reg_b $end
     $var wire 32 G WIDTH [31:0] $end
     $var wire 1 < clock $end
     $var wire 1 = reset $end
     $var wire 1 E load $end
     $var wire 4 6 data_in [3:0] $end
     $var wire 4 5 data_out [3:0] $end
    $upscope $end
   $upscope $end
   $scope module select $end
    $var wire 32 H N [31:0] $end
    $var wire 2 F addr [1:0] $end
    $var wire 4 A selector [3:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b00 $
b00 %
b0000 &
0'
0(
b1111 )
b1111 *
b0000 +
0,
0-
b1111 .
b1111 /
b00000000 0
b00000000 1
b0000 2
b0000 3
b0000 4
b0000 5
b0000 6
b000 7
08
09
0:
0;
0<
0=
b00000000 >
b01100001 ?
0@
b0001 A
0B
0C
0D
0E
b00 F
b00000000000000000000000000000100 G
b00000000000000000000000000000010 H
b00000000000000000000000000000011 I
b00000000000000000000000000000111 J
